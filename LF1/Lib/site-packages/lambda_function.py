import base64, time, json, sys,decimal
import time

from random import randint
from pip._internal import main
# main(['install', 'boto3', '--target', '/tmp/'])
# sys.path.insert(0,'/tmp/')
import boto3
import cv2


def replace_decimals(obj):
    if isinstance(obj, list):
        for i in range(0,len(obj)):
            obj[i] = replace_decimals(obj[i])
        return obj
    elif isinstance(obj, dict):
        for k in obj.keys():
            obj[k] = replace_decimals(obj[k])
        return obj
    elif isinstance(obj, decimal.Decimal):
        return str(obj)
        # In my original code I'm converting to int or float, comment the line above if necessary.
        if obj % 1 == 0:
            return int(obj)
        else:
            return float(obj)
    else:
        return obj

# def save_shot(streamARN, fragmentNumber,faceId):
#     print("In SavedShot")
#     s3_client = boto3.client('s3')
#     rekClient=boto3.client('rekognition')
    
#     kvs = boto3.client("kinesisvideo")
    
#     endpoint = kvs.get_data_endpoint(
#         APIName="GET_MEDIA",
#         StreamARN=streamARN
#     )['DataEndpoint']
#     # print("Kinesis Data endpoint: ",endpoint)

#     kvam = boto3.client("kinesis-video-media", endpoint_url=endpoint)

#     kvs_stream = kvam.get_media( StreamARN=streamARN, StartSelector={ 'StartSelectorType': 'FRAGMENT_NUMBER', 'AfterFragmentNumber': fragmentNumber})

    
#     collectionId="assign2"
#     # print("KVS Stream: ",kvs_stream)
#     with open('/tmp/stream.mkv', 'wb') as f:
#         streamBody = kvs_stream['Payload'].read(1024*512)
#         f.write(streamBody)
#         cap = cv2.VideoCapture('/tmp/stream.mkv')
#         ret, frame = cap.read() 
#         cv2.imwrite('/tmp/frame.jpg', frame)
#         fileName= 'SavedShot'+'-'+fragmentNumber+ '-T-'+ str(time.time())+'.jpg'
#         print ('before upload')
#         s3_client.upload_file(
#             '/tmp/frame.jpg',
#             'saved-shots', 
#             fileName
#         )
#         cap.release()
#         print('Image uploaded')

#     return

def store_image(streamARN, fragmentNumber,faceId):
    print("In Store Image")
    s3_client = boto3.client('s3')
    rekClient=boto3.client('rekognition')
    
    kvs = boto3.client("kinesisvideo")
    
    endpoint = kvs.get_data_endpoint(
        APIName="GET_MEDIA",
        StreamARN=streamARN
    )['DataEndpoint']
    print("Kinesis Data endpoint: ",endpoint)

    kvam = boto3.client("kinesis-video-media", endpoint_url=endpoint)

    kvs_stream = kvam.get_media( StreamARN=streamARN, StartSelector={ 'StartSelectorType': 'FRAGMENT_NUMBER', 'AfterFragmentNumber': fragmentNumber})

    
    collectionId="assign2"
    print("KVS Stream: ",kvs_stream)
    
    with open('/tmp/stream.mkv', 'wb') as f:

        streamBody = kvs_stream['Payload'].read(1024*512)
        f.write(streamBody)
      
        # s3_client.upload_file(
        #     '/tmp/stream.mkv',
        #     'visitors-buck', 
        #     'mkvfile.mkv'
        # )
       
        cap = cv2.VideoCapture('/tmp/stream.mkv')
       
        
        ret, frame = cap.read() 
        cv2.imwrite('/tmp/frame.jpg', frame)
        
        
        
        fileName= 'FaceId'+'-'+fragmentNumber+'.jpg'
        print ('before upload')
        s3_client.upload_file(
            '/tmp/frame.jpg',
            'visitors-buck', 
            fileName
        )
        cap.release()
        print('Image uploaded')
        return fileName, "face"
    return

def tackle_new_visitor(data):
    print("New Visitor")
    streamARN = data['StreamArn']
    fragmentNumber = data['FragmentNumber']
    fileName,faceId=store_image(streamARN,fragmentNumber, None)
    return

def generate_otp(phone,faceId):
    print("OTP")
    otp = randint(100000, 999999)
    item = {}
    item['otp'] = str(otp)
    item['phone'] = phone
    client = boto3.resource('dynamodb')
    table = client.Table('passcodes')
    my_passcodes_entry = {'faceId' : faceId, 'otp': str(otp), 'expiration' : str(int(time.time() + 60))}
    table.put_item(Item=my_passcodes_entry, TableName='passcodes' )
    sns = boto3.client('sns')
    message = "Your otp is : " + str(otp)
    x = sns.publish(PhoneNumber = phone, Message=message )
    print("SMS sent")

def authorize(faceId):
    print("authorize")
    dynamodb = boto3.resource('dynamodb')
    table = dynamodb.Table('visitors')
    response = replace_decimals(table.get_item(Key={'faceId': faceId}, TableName='visitors'))
    generate_otp(response['Item']['phone'],faceId)

    print("Phone:" + phone)
    print("Generated OTP")
    return



def process_face_search_response(matchedFace):
    print("Face has been matched :")
    faceId = matchedFace['Face']['FaceId']
    authorize(faceId)
    return



def lambda_handler(event, context):

    for record in event['Records']:
        print("Payload: ")

        payload = json.loads(base64.b64decode(record['kinesis']['data']))
        print(payload)

        if "FaceSearchResponse" in payload:
            if 0!=len(payload['FaceSearchResponse']):
                if 0 != len(payload['FaceSearchResponse'][0]['MatchedFaces']):
                    process_face_search_response(payload['FaceSearchResponse'][0]['MatchedFaces'][0])
                else:
                    tackle_new_visitor(payload['InputInformation']['KinesisVideo'])
    print("End Lambda")

    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!')
    }
